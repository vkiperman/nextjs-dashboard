{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\n \nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\n      if (isOnDashboard) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      } else if (isLoggedIn) {\n        return Response.redirect(new URL('/dashboard', nextUrl));\n      }\n      return true;\n    },\n  },\n  providers: [Credentials({})],\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AACA;AAAA;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW;QAAC,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE,CAAC;KAAG;AAC9B","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport { authConfig } from './auth.config';\nimport { z } from 'zod';\nimport type { User } from '@/app/lib/definitions';\nimport bcrypt from 'bcrypt';\nimport postgres from 'postgres';\n \nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n \nasync function getUser(email: string): Promise<User | undefined> {\n  try {\n    const user = await sql<User[]>`SELECT * FROM users WHERE email=${email}`;\n    return user[0];\n  } catch (error) {\n    console.error('Failed to fetch user:', error);\n    throw new Error('Failed to fetch user.');\n  }\n}\n \nexport const { auth, signIn, signOut } = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      async authorize(credentials) {\n        const parsedCredentials = z\n          .object({ email: z.string().email(), password: z.string().min(6) })\n          .safeParse(credentials);\n \n        if (parsedCredentials.success) {\n          const { email, password } = parsedCredentials.data;\n          const user = await getUser(email);\n          if (!user) return null;\n          \n          const passwordsMatch = await bcrypt.compare(password, user.password);\n          if (passwordsMatch) return user;\n\n        }\n        \n        console.log('Invalid credentials');\n        return null;\n      },\n    }),\n  ],\n});"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,eAAe,QAAQ,KAAa;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,GAAW,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACxE,OAAO,IAAI,CAAC,EAAE;IAChB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,wWAAA,CAAA,UAAQ,AAAD,EAAE;IAChD,GAAG,8GAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,oBAAoB,mOAAA,CAAA,IAAC,CACxB,MAAM,CAAC;oBAAE,OAAO,mOAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,mOAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAG,GAChE,SAAS,CAAC;gBAEb,IAAI,kBAAkB,OAAO,EAAE;oBAC7B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAElB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBACnE,IAAI,gBAAgB,OAAO;gBAE7B;gBAEA,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACT;QACF;KACD;AACH","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/app/lib/actions.tsx"],"sourcesContent":["'use server';\n\nimport postgres from 'postgres';\nimport { AuthError } from 'next-auth';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\nimport { signIn } from '@/auth';\nimport { z } from 'zod';\n\nexport async function authenticate(\n  prevState: string | undefined,\n  formData: FormData,\n) {\n  try {\n    await signIn('credentials', formData);\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case 'CredentialsSignin':\n          return 'Invalid credentials.';\n        default:\n          return 'Something went wrong.';\n      }\n    }\n    throw error;\n  }\n}\n \nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n \nconst FormSchema = z.object({\n  id: z.string(),\n  customerId: z.string({\n    invalid_type_error: 'Please select a customer.',\n  }),\n  amount: z.coerce\n    .number()\n    .gt(0, { message: 'Please enter an amount greater than $0.' }),\n  status: z.enum(['pending', 'paid'], {\n    invalid_type_error: 'Please select an invoice status.',\n  }),\n  date: z.string(),\n});\n \nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\nexport type State = {\n  errors?: {\n    customerId?: string[];\n    amount?: string[];\n    status?: string[];\n  };\n  message?: string | null;\n};\nexport async function createInvoice(prevState: State, formData: FormData) {\n  // Validate form using Zod\n  const { success, error, data } = CreateInvoice.safeParse({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n \n  // If form validation fails, return errors early. Otherwise, continue.\n  if (!success) {\n    return {\n      errors: error.flatten().fieldErrors,\n      message: 'Missing Fields. Failed to Create Invoice.',\n    };\n  }\n \n  // Prepare data for insertion into the database\n  const { customerId, amount, status } = data;\n  const amountInCents = amount * 100;\n  const date = new Date().toISOString().split('T')[0];\n \n  // Insert data into the database\n  try {\n    await sql`\n      INSERT INTO invoices (customer_id, amount, status, date)\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n    `;\n  } catch (error) {\n    // If a database error occurs, return a more specific error.\n    return {\n      message: `Database Error: Failed to Create Invoice. ${error}`,\n    };\n  }\n \n  // Revalidate the cache for the invoices page and redirect the user.\n  revalidatePath('/dashboard/invoices');\n  redirect('/dashboard/invoices');\n}\n\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function updateInvoice(id: string, formData: FormData) {\n  const { customerId, amount, status } = UpdateInvoice.parse({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n \n  const amountInCents = amount * 100;\n \n  try {\n    await sql`\n      UPDATE invoices\n      SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n      WHERE id = ${id}\n    `;\n  } catch (error) { \n    console.error(error)\n  }\n \n  revalidatePath('/dashboard/invoices');\n  redirect('/dashboard/invoices');\n}\n\nexport async function deleteInvoice(id: string) {\n    throw new Error('Failed to Delete Invoice');\n\n  // try {\n  //   await sql`DELETE FROM invoices WHERE id = ${id}`;\n  // } catch (error) {\n  //   console.log(error)\n  // }\n  // revalidatePath('/dashboard/invoices');\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {authenticate as '6084470c257bcdf083ad707ce17caa5a62881dbfdc'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/app/ui/acme-logo.tsx"],"sourcesContent":["import { GlobeAltIcon } from '@heroicons/react/24/outline';\nimport { lusitana } from './fonts';\n\nexport default function AcmeLogo() {\n  return (\n    <div\n      className={`${lusitana.className} flex flex-row items-center leading-none text-white`}\n    >\n      <GlobeAltIcon className=\"h-12 w-12 rotate-[15deg]\" />\n      <p className=\"text-[44px]\">Acme</p>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;;AAEe,SAAS;IACtB,qBACE,6XAAC;QACC,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,mDAAmD,CAAC;;0BAErF,6XAAC,8SAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;0BACxB,6XAAC;gBAAE,WAAU;0BAAc;;;;;;;;;;;;AAGjC","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/app/ui/login-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oYAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/app/ui/login-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oYAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 417, "column": 0}, "map": {"version":3,"sources":["file:///Users/dev/nextjs-dashboard/app/login/page.tsx"],"sourcesContent":["import AcmeLogo from '@/app/ui/acme-logo';\nimport LoginForm from '@/app/ui/login-form';\nimport { Suspense } from 'react';\n \nexport default function LoginPage() {\n  return (\n    <main className=\"flex items-center justify-center md:h-screen\">\n      <div className=\"relative mx-auto flex w-full max-w-[400px] flex-col space-y-2.5 p-4 md:-mt-32\">\n        <div className=\"flex h-20 w-full items-end rounded-lg bg-blue-500 p-3 md:h-36\">\n          <div className=\"w-32 text-white md:w-36\">\n            <AcmeLogo />\n          </div>\n        </div>\n        <Suspense>\n          <LoginForm />\n        </Suspense>\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,6XAAC;QAAK,WAAU;kBACd,cAAA,6XAAC;YAAI,WAAU;;8BACb,6XAAC;oBAAI,WAAU;8BACb,cAAA,6XAAC;wBAAI,WAAU;kCACb,cAAA,6XAAC,0HAAA,CAAA,UAAQ;;;;;;;;;;;;;;;8BAGb,6XAAC,oVAAA,CAAA,WAAQ;8BACP,cAAA,6XAAC,2HAAA,CAAA,UAAS;;;;;;;;;;;;;;;;;;;;;AAKpB","debugId":null}}]
}